# -*- coding: utf-8 -*-
"""Modified Dijkstra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1Q_spx7_I9ksjIRQQDArSa8ynRvFSF7
"""

import heapq

def modified_dijkstra(graph, source, destination):
    distances = {node: float('inf') for node in graph}
    distances[source] = 0
    heap = [(0, source)]
    while heap:
        (curr_distance, curr_node) = heapq.heappop(heap)
        if curr_distance > distances[curr_node]:
            continue
        for neighbor, weight in graph[curr_node].items():
            if curr_distance + weight < distances[neighbor]:
                distances[neighbor] = curr_distance + weight
                heapq.heappush(heap, (distances[neighbor], neighbor))
    routes = []
    for node, distance in distances.items():
        if node == destination:
            route = [destination]
            curr_node = destination
            while curr_node != source:
                for neighbor, weight in graph[curr_node].items():
                    if distances[curr_node] - weight == distances[neighbor]:
                        route.insert(0, neighbor)
                        curr_node = neighbor
                        break
            routes.append(route)
    return routes

def calculate_probability(routes):
    probabilities = {}
    for route in routes:
        probability = 1
        for i in range(len(route) - 1):
            probability *= graph[route[i]][route[i + 1]]
        probabilities[tuple(route)] = probability
    return sorted(probabilities.items(), key=lambda x: x[1], reverse=True)

def calculate_runtime(routes):
    runtimes = {}
    for route in routes:
        runtime = 0
        for i in range(len(route) - 1):
            runtime += graph[route[i]][route[i + 1]]
        runtimes[tuple(route)] = runtime
    return sorted(runtimes.items(), key=lambda x: x[1])

graph = {
    'A': {'B': 0.7, 'C': 0.3},
    'B': {'C': 0.6, 'D': 0.4},
    'C': {'D': 0.9},
    'D': {}
}

routes = modified_dijkstra(graph, 'A', 'D')
probabilities = calculate_probability(routes)
for probability in probabilities:
    print('Route:', probability[0], 'Probability:', probability[1])

runtimes = calculate_runtime(routes)
for runtime in runtimes:
    print('Route:', runtime[0], 'Runtime:', runtime[1])