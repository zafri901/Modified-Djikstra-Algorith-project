# -*- coding: utf-8 -*-
"""Dijkstra's algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F-igvNWbImhEceXCtVxM6kK1rP5zwR8A
"""

import heapq

def dijkstra(graph, start, end):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    queue = [(0, start)]
    while queue:
        (distance, current) = heapq.heappop(queue)
        if current == end:
            return distance
        for neighbor, cost in graph[current].items():
            new_distance = distance + cost
            if new_distance < distances[neighbor]:
                distances[neighbor] = new_distance
                heapq.heappush(queue, (new_distance, neighbor))
    return -1

# Example usage
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1},
}
print(dijkstra(graph, 'A', 'D')) # Output: 3